//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

genome_annotation.thrift_service_get_taxon_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
  }
};
genome_annotation.thrift_service_get_taxon_args.prototype = {};
genome_annotation.thrift_service_get_taxon_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_taxon_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_taxon_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_taxon_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_taxon_result.prototype = {};
genome_annotation.thrift_service_get_taxon_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_taxon_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_taxon_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_assembly_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
  }
};
genome_annotation.thrift_service_get_assembly_args.prototype = {};
genome_annotation.thrift_service_get_assembly_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_assembly_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_assembly_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_assembly_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_assembly_result.prototype = {};
genome_annotation.thrift_service_get_assembly_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_assembly_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_assembly_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_types_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
  }
};
genome_annotation.thrift_service_get_feature_types_args.prototype = {};
genome_annotation.thrift_service_get_feature_types_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_types_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_types_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_types_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_types_result.prototype = {};
genome_annotation.thrift_service_get_feature_types_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size250 = 0;
        var _rtmp3254;
        this.success = [];
        var _etype253 = 0;
        _rtmp3254 = input.readListBegin();
        _etype253 = _rtmp3254.etype;
        _size250 = _rtmp3254.size;
        for (var _i255 = 0; _i255 < _size250; ++_i255)
        {
          var elem256 = null;
          elem256 = input.readString().value;
          this.success.push(elem256);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_types_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_types_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter257 in this.success)
    {
      if (this.success.hasOwnProperty(iter257))
      {
        iter257 = this.success[iter257];
        output.writeString(iter257);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_descriptions_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_type_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_type_list !== undefined) {
      this.feature_type_list = args.feature_type_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_type_descriptions_args.prototype = {};
genome_annotation.thrift_service_get_feature_type_descriptions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size258 = 0;
        var _rtmp3262;
        this.feature_type_list = [];
        var _etype261 = 0;
        _rtmp3262 = input.readListBegin();
        _etype261 = _rtmp3262.etype;
        _size258 = _rtmp3262.size;
        for (var _i263 = 0; _i263 < _size258; ++_i263)
        {
          var elem264 = null;
          elem264 = input.readString().value;
          this.feature_type_list.push(elem264);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_descriptions_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_type_descriptions_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_type_list !== null && this.feature_type_list !== undefined) {
    output.writeFieldBegin('feature_type_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_type_list.length);
    for (var iter265 in this.feature_type_list)
    {
      if (this.feature_type_list.hasOwnProperty(iter265))
      {
        iter265 = this.feature_type_list[iter265];
        output.writeString(iter265);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_descriptions_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_type_descriptions_result.prototype = {};
genome_annotation.thrift_service_get_feature_type_descriptions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size266 = 0;
        var _rtmp3270;
        this.success = {};
        var _ktype267 = 0;
        var _vtype268 = 0;
        _rtmp3270 = input.readMapBegin();
        _ktype267 = _rtmp3270.ktype;
        _vtype268 = _rtmp3270.vtype;
        _size266 = _rtmp3270.size;
        for (var _i271 = 0; _i271 < _size266; ++_i271)
        {
          if (_i271 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key272 = null;
          var val273 = null;
          key272 = input.readString().value;
          val273 = input.readString().value;
          this.success[key272] = val273;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_descriptions_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_type_descriptions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter274 in this.success)
    {
      if (this.success.hasOwnProperty(kiter274))
      {
        var viter275 = this.success[kiter274];
        output.writeString(kiter274);
        output.writeString(viter275);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_counts_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_type_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_type_list !== undefined) {
      this.feature_type_list = args.feature_type_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_type_counts_args.prototype = {};
genome_annotation.thrift_service_get_feature_type_counts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size276 = 0;
        var _rtmp3280;
        this.feature_type_list = [];
        var _etype279 = 0;
        _rtmp3280 = input.readListBegin();
        _etype279 = _rtmp3280.etype;
        _size276 = _rtmp3280.size;
        for (var _i281 = 0; _i281 < _size276; ++_i281)
        {
          var elem282 = null;
          elem282 = input.readString().value;
          this.feature_type_list.push(elem282);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_counts_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_type_counts_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_type_list !== null && this.feature_type_list !== undefined) {
    output.writeFieldBegin('feature_type_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_type_list.length);
    for (var iter283 in this.feature_type_list)
    {
      if (this.feature_type_list.hasOwnProperty(iter283))
      {
        iter283 = this.feature_type_list[iter283];
        output.writeString(iter283);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_counts_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_type_counts_result.prototype = {};
genome_annotation.thrift_service_get_feature_type_counts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size284 = 0;
        var _rtmp3288;
        this.success = {};
        var _ktype285 = 0;
        var _vtype286 = 0;
        _rtmp3288 = input.readMapBegin();
        _ktype285 = _rtmp3288.ktype;
        _vtype286 = _rtmp3288.vtype;
        _size284 = _rtmp3288.size;
        for (var _i289 = 0; _i289 < _size284; ++_i289)
        {
          if (_i289 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key290 = null;
          var val291 = null;
          key290 = input.readString().value;
          val291 = input.readI64().value;
          this.success[key290] = val291;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_counts_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_type_counts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.success));
    for (var kiter292 in this.success)
    {
      if (this.success.hasOwnProperty(kiter292))
      {
        var viter293 = this.success[kiter292];
        output.writeString(kiter292);
        output.writeI64(viter293);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_ids_args = function(args) {
  this.token = null;
  this.ref = null;
  this.filters = null;
  this.group_type = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.filters !== undefined) {
      this.filters = args.filters;
    }
    if (args.group_type !== undefined) {
      this.group_type = args.group_type;
    }
  }
};
genome_annotation.thrift_service_get_feature_ids_args.prototype = {};
genome_annotation.thrift_service_get_feature_ids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filters = new genome_annotation.Feature_id_filters();
        this.filters.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.group_type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_ids_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_ids_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.filters !== null && this.filters !== undefined) {
    output.writeFieldBegin('filters', Thrift.Type.STRUCT, 3);
    this.filters.write(output);
    output.writeFieldEnd();
  }
  if (this.group_type !== null && this.group_type !== undefined) {
    output.writeFieldBegin('group_type', Thrift.Type.STRING, 4);
    output.writeString(this.group_type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_ids_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_ids_result.prototype = {};
genome_annotation.thrift_service_get_feature_ids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new genome_annotation.Feature_id_mapping();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_ids_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_ids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_features_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_id_list !== undefined) {
      this.feature_id_list = args.feature_id_list;
    }
  }
};
genome_annotation.thrift_service_get_features_args.prototype = {};
genome_annotation.thrift_service_get_features_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size294 = 0;
        var _rtmp3298;
        this.feature_id_list = [];
        var _etype297 = 0;
        _rtmp3298 = input.readListBegin();
        _etype297 = _rtmp3298.etype;
        _size294 = _rtmp3298.size;
        for (var _i299 = 0; _i299 < _size294; ++_i299)
        {
          var elem300 = null;
          elem300 = input.readString().value;
          this.feature_id_list.push(elem300);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_features_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_features_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_id_list !== null && this.feature_id_list !== undefined) {
    output.writeFieldBegin('feature_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_id_list.length);
    for (var iter301 in this.feature_id_list)
    {
      if (this.feature_id_list.hasOwnProperty(iter301))
      {
        iter301 = this.feature_id_list[iter301];
        output.writeString(iter301);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_features_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_features_result.prototype = {};
genome_annotation.thrift_service_get_features_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size302 = 0;
        var _rtmp3306;
        this.success = {};
        var _ktype303 = 0;
        var _vtype304 = 0;
        _rtmp3306 = input.readMapBegin();
        _ktype303 = _rtmp3306.ktype;
        _vtype304 = _rtmp3306.vtype;
        _size302 = _rtmp3306.size;
        for (var _i307 = 0; _i307 < _size302; ++_i307)
        {
          if (_i307 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key308 = null;
          var val309 = null;
          key308 = input.readString().value;
          val309 = new genome_annotation.Feature_data();
          val309.read(input);
          this.success[key308] = val309;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_features_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_features_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter310 in this.success)
    {
      if (this.success.hasOwnProperty(kiter310))
      {
        var viter311 = this.success[kiter310];
        output.writeString(kiter310);
        viter311.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_proteins_args = function(args) {
  this.token = null;
  this.ref = null;
  this.cds_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.cds_id_list !== undefined) {
      this.cds_id_list = args.cds_id_list;
    }
  }
};
genome_annotation.thrift_service_get_proteins_args.prototype = {};
genome_annotation.thrift_service_get_proteins_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size312 = 0;
        var _rtmp3316;
        this.cds_id_list = [];
        var _etype315 = 0;
        _rtmp3316 = input.readListBegin();
        _etype315 = _rtmp3316.etype;
        _size312 = _rtmp3316.size;
        for (var _i317 = 0; _i317 < _size312; ++_i317)
        {
          var elem318 = null;
          elem318 = input.readString().value;
          this.cds_id_list.push(elem318);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_proteins_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_proteins_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.cds_id_list !== null && this.cds_id_list !== undefined) {
    output.writeFieldBegin('cds_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.cds_id_list.length);
    for (var iter319 in this.cds_id_list)
    {
      if (this.cds_id_list.hasOwnProperty(iter319))
      {
        iter319 = this.cds_id_list[iter319];
        output.writeString(iter319);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_proteins_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_proteins_result.prototype = {};
genome_annotation.thrift_service_get_proteins_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size320 = 0;
        var _rtmp3324;
        this.success = {};
        var _ktype321 = 0;
        var _vtype322 = 0;
        _rtmp3324 = input.readMapBegin();
        _ktype321 = _rtmp3324.ktype;
        _vtype322 = _rtmp3324.vtype;
        _size320 = _rtmp3324.size;
        for (var _i325 = 0; _i325 < _size320; ++_i325)
        {
          if (_i325 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key326 = null;
          var val327 = null;
          key326 = input.readString().value;
          val327 = new genome_annotation.Protein_data();
          val327.read(input);
          this.success[key326] = val327;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_proteins_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_proteins_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter328 in this.success)
    {
      if (this.success.hasOwnProperty(kiter328))
      {
        var viter329 = this.success[kiter328];
        output.writeString(kiter328);
        viter329.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_locations_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_id_list !== undefined) {
      this.feature_id_list = args.feature_id_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_locations_args.prototype = {};
genome_annotation.thrift_service_get_feature_locations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size330 = 0;
        var _rtmp3334;
        this.feature_id_list = [];
        var _etype333 = 0;
        _rtmp3334 = input.readListBegin();
        _etype333 = _rtmp3334.etype;
        _size330 = _rtmp3334.size;
        for (var _i335 = 0; _i335 < _size330; ++_i335)
        {
          var elem336 = null;
          elem336 = input.readString().value;
          this.feature_id_list.push(elem336);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_locations_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_locations_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_id_list !== null && this.feature_id_list !== undefined) {
    output.writeFieldBegin('feature_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_id_list.length);
    for (var iter337 in this.feature_id_list)
    {
      if (this.feature_id_list.hasOwnProperty(iter337))
      {
        iter337 = this.feature_id_list[iter337];
        output.writeString(iter337);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_locations_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_locations_result.prototype = {};
genome_annotation.thrift_service_get_feature_locations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size338 = 0;
        var _rtmp3342;
        this.success = {};
        var _ktype339 = 0;
        var _vtype340 = 0;
        _rtmp3342 = input.readMapBegin();
        _ktype339 = _rtmp3342.ktype;
        _vtype340 = _rtmp3342.vtype;
        _size338 = _rtmp3342.size;
        for (var _i343 = 0; _i343 < _size338; ++_i343)
        {
          if (_i343 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key344 = null;
          var val345 = null;
          key344 = input.readString().value;
          var _size346 = 0;
          var _rtmp3350;
          val345 = [];
          var _etype349 = 0;
          _rtmp3350 = input.readListBegin();
          _etype349 = _rtmp3350.etype;
          _size346 = _rtmp3350.size;
          for (var _i351 = 0; _i351 < _size346; ++_i351)
          {
            var elem352 = null;
            elem352 = new genome_annotation.Region();
            elem352.read(input);
            val345.push(elem352);
          }
          input.readListEnd();
          this.success[key344] = val345;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_locations_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_locations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter353 in this.success)
    {
      if (this.success.hasOwnProperty(kiter353))
      {
        var viter354 = this.success[kiter353];
        output.writeString(kiter353);
        output.writeListBegin(Thrift.Type.STRUCT, viter354.length);
        for (var iter355 in viter354)
        {
          if (viter354.hasOwnProperty(iter355))
          {
            iter355 = viter354[iter355];
            iter355.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_publications_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_id_list !== undefined) {
      this.feature_id_list = args.feature_id_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_publications_args.prototype = {};
genome_annotation.thrift_service_get_feature_publications_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size356 = 0;
        var _rtmp3360;
        this.feature_id_list = [];
        var _etype359 = 0;
        _rtmp3360 = input.readListBegin();
        _etype359 = _rtmp3360.etype;
        _size356 = _rtmp3360.size;
        for (var _i361 = 0; _i361 < _size356; ++_i361)
        {
          var elem362 = null;
          elem362 = input.readString().value;
          this.feature_id_list.push(elem362);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_publications_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_publications_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_id_list !== null && this.feature_id_list !== undefined) {
    output.writeFieldBegin('feature_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_id_list.length);
    for (var iter363 in this.feature_id_list)
    {
      if (this.feature_id_list.hasOwnProperty(iter363))
      {
        iter363 = this.feature_id_list[iter363];
        output.writeString(iter363);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_publications_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_publications_result.prototype = {};
genome_annotation.thrift_service_get_feature_publications_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size364 = 0;
        var _rtmp3368;
        this.success = {};
        var _ktype365 = 0;
        var _vtype366 = 0;
        _rtmp3368 = input.readMapBegin();
        _ktype365 = _rtmp3368.ktype;
        _vtype366 = _rtmp3368.vtype;
        _size364 = _rtmp3368.size;
        for (var _i369 = 0; _i369 < _size364; ++_i369)
        {
          if (_i369 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key370 = null;
          var val371 = null;
          key370 = input.readString().value;
          var _size372 = 0;
          var _rtmp3376;
          val371 = [];
          var _etype375 = 0;
          _rtmp3376 = input.readListBegin();
          _etype375 = _rtmp3376.etype;
          _size372 = _rtmp3376.size;
          for (var _i377 = 0; _i377 < _size372; ++_i377)
          {
            var elem378 = null;
            elem378 = input.readString().value;
            val371.push(elem378);
          }
          input.readListEnd();
          this.success[key370] = val371;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_publications_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_publications_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter379 in this.success)
    {
      if (this.success.hasOwnProperty(kiter379))
      {
        var viter380 = this.success[kiter379];
        output.writeString(kiter379);
        output.writeListBegin(Thrift.Type.STRING, viter380.length);
        for (var iter381 in viter380)
        {
          if (viter380.hasOwnProperty(iter381))
          {
            iter381 = viter380[iter381];
            output.writeString(iter381);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_dna_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_id_list !== undefined) {
      this.feature_id_list = args.feature_id_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_dna_args.prototype = {};
genome_annotation.thrift_service_get_feature_dna_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size382 = 0;
        var _rtmp3386;
        this.feature_id_list = [];
        var _etype385 = 0;
        _rtmp3386 = input.readListBegin();
        _etype385 = _rtmp3386.etype;
        _size382 = _rtmp3386.size;
        for (var _i387 = 0; _i387 < _size382; ++_i387)
        {
          var elem388 = null;
          elem388 = input.readString().value;
          this.feature_id_list.push(elem388);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_dna_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_dna_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_id_list !== null && this.feature_id_list !== undefined) {
    output.writeFieldBegin('feature_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_id_list.length);
    for (var iter389 in this.feature_id_list)
    {
      if (this.feature_id_list.hasOwnProperty(iter389))
      {
        iter389 = this.feature_id_list[iter389];
        output.writeString(iter389);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_dna_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_dna_result.prototype = {};
genome_annotation.thrift_service_get_feature_dna_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size390 = 0;
        var _rtmp3394;
        this.success = {};
        var _ktype391 = 0;
        var _vtype392 = 0;
        _rtmp3394 = input.readMapBegin();
        _ktype391 = _rtmp3394.ktype;
        _vtype392 = _rtmp3394.vtype;
        _size390 = _rtmp3394.size;
        for (var _i395 = 0; _i395 < _size390; ++_i395)
        {
          if (_i395 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key396 = null;
          var val397 = null;
          key396 = input.readString().value;
          val397 = input.readString().value;
          this.success[key396] = val397;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_dna_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_dna_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter398 in this.success)
    {
      if (this.success.hasOwnProperty(kiter398))
      {
        var viter399 = this.success[kiter398];
        output.writeString(kiter398);
        output.writeString(viter399);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_functions_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_id_list !== undefined) {
      this.feature_id_list = args.feature_id_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_functions_args.prototype = {};
genome_annotation.thrift_service_get_feature_functions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size400 = 0;
        var _rtmp3404;
        this.feature_id_list = [];
        var _etype403 = 0;
        _rtmp3404 = input.readListBegin();
        _etype403 = _rtmp3404.etype;
        _size400 = _rtmp3404.size;
        for (var _i405 = 0; _i405 < _size400; ++_i405)
        {
          var elem406 = null;
          elem406 = input.readString().value;
          this.feature_id_list.push(elem406);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_functions_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_functions_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_id_list !== null && this.feature_id_list !== undefined) {
    output.writeFieldBegin('feature_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_id_list.length);
    for (var iter407 in this.feature_id_list)
    {
      if (this.feature_id_list.hasOwnProperty(iter407))
      {
        iter407 = this.feature_id_list[iter407];
        output.writeString(iter407);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_functions_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_functions_result.prototype = {};
genome_annotation.thrift_service_get_feature_functions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size408 = 0;
        var _rtmp3412;
        this.success = {};
        var _ktype409 = 0;
        var _vtype410 = 0;
        _rtmp3412 = input.readMapBegin();
        _ktype409 = _rtmp3412.ktype;
        _vtype410 = _rtmp3412.vtype;
        _size408 = _rtmp3412.size;
        for (var _i413 = 0; _i413 < _size408; ++_i413)
        {
          if (_i413 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key414 = null;
          var val415 = null;
          key414 = input.readString().value;
          val415 = input.readString().value;
          this.success[key414] = val415;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_functions_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_functions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter416 in this.success)
    {
      if (this.success.hasOwnProperty(kiter416))
      {
        var viter417 = this.success[kiter416];
        output.writeString(kiter416);
        output.writeString(viter417);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_aliases_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_id_list !== undefined) {
      this.feature_id_list = args.feature_id_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_aliases_args.prototype = {};
genome_annotation.thrift_service_get_feature_aliases_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size418 = 0;
        var _rtmp3422;
        this.feature_id_list = [];
        var _etype421 = 0;
        _rtmp3422 = input.readListBegin();
        _etype421 = _rtmp3422.etype;
        _size418 = _rtmp3422.size;
        for (var _i423 = 0; _i423 < _size418; ++_i423)
        {
          var elem424 = null;
          elem424 = input.readString().value;
          this.feature_id_list.push(elem424);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_aliases_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_aliases_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_id_list !== null && this.feature_id_list !== undefined) {
    output.writeFieldBegin('feature_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_id_list.length);
    for (var iter425 in this.feature_id_list)
    {
      if (this.feature_id_list.hasOwnProperty(iter425))
      {
        iter425 = this.feature_id_list[iter425];
        output.writeString(iter425);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_aliases_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_aliases_result.prototype = {};
genome_annotation.thrift_service_get_feature_aliases_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size426 = 0;
        var _rtmp3430;
        this.success = {};
        var _ktype427 = 0;
        var _vtype428 = 0;
        _rtmp3430 = input.readMapBegin();
        _ktype427 = _rtmp3430.ktype;
        _vtype428 = _rtmp3430.vtype;
        _size426 = _rtmp3430.size;
        for (var _i431 = 0; _i431 < _size426; ++_i431)
        {
          if (_i431 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key432 = null;
          var val433 = null;
          key432 = input.readString().value;
          var _size434 = 0;
          var _rtmp3438;
          val433 = [];
          var _etype437 = 0;
          _rtmp3438 = input.readListBegin();
          _etype437 = _rtmp3438.etype;
          _size434 = _rtmp3438.size;
          for (var _i439 = 0; _i439 < _size434; ++_i439)
          {
            var elem440 = null;
            elem440 = input.readString().value;
            val433.push(elem440);
          }
          input.readListEnd();
          this.success[key432] = val433;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_aliases_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_aliases_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter441 in this.success)
    {
      if (this.success.hasOwnProperty(kiter441))
      {
        var viter442 = this.success[kiter441];
        output.writeString(kiter441);
        output.writeListBegin(Thrift.Type.STRING, viter442.length);
        for (var iter443 in viter442)
        {
          if (viter442.hasOwnProperty(iter443))
          {
            iter443 = viter442[iter443];
            output.writeString(iter443);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_gene_args = function(args) {
  this.token = null;
  this.ref = null;
  this.gene_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.gene_id_list !== undefined) {
      this.gene_id_list = args.gene_id_list;
    }
  }
};
genome_annotation.thrift_service_get_cds_by_gene_args.prototype = {};
genome_annotation.thrift_service_get_cds_by_gene_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size444 = 0;
        var _rtmp3448;
        this.gene_id_list = [];
        var _etype447 = 0;
        _rtmp3448 = input.readListBegin();
        _etype447 = _rtmp3448.etype;
        _size444 = _rtmp3448.size;
        for (var _i449 = 0; _i449 < _size444; ++_i449)
        {
          var elem450 = null;
          elem450 = input.readString().value;
          this.gene_id_list.push(elem450);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_gene_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_cds_by_gene_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.gene_id_list !== null && this.gene_id_list !== undefined) {
    output.writeFieldBegin('gene_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.gene_id_list.length);
    for (var iter451 in this.gene_id_list)
    {
      if (this.gene_id_list.hasOwnProperty(iter451))
      {
        iter451 = this.gene_id_list[iter451];
        output.writeString(iter451);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_gene_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_cds_by_gene_result.prototype = {};
genome_annotation.thrift_service_get_cds_by_gene_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size452 = 0;
        var _rtmp3456;
        this.success = {};
        var _ktype453 = 0;
        var _vtype454 = 0;
        _rtmp3456 = input.readMapBegin();
        _ktype453 = _rtmp3456.ktype;
        _vtype454 = _rtmp3456.vtype;
        _size452 = _rtmp3456.size;
        for (var _i457 = 0; _i457 < _size452; ++_i457)
        {
          if (_i457 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key458 = null;
          var val459 = null;
          key458 = input.readString().value;
          var _size460 = 0;
          var _rtmp3464;
          val459 = [];
          var _etype463 = 0;
          _rtmp3464 = input.readListBegin();
          _etype463 = _rtmp3464.etype;
          _size460 = _rtmp3464.size;
          for (var _i465 = 0; _i465 < _size460; ++_i465)
          {
            var elem466 = null;
            elem466 = input.readString().value;
            val459.push(elem466);
          }
          input.readListEnd();
          this.success[key458] = val459;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_gene_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_cds_by_gene_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter467 in this.success)
    {
      if (this.success.hasOwnProperty(kiter467))
      {
        var viter468 = this.success[kiter467];
        output.writeString(kiter467);
        output.writeListBegin(Thrift.Type.STRING, viter468.length);
        for (var iter469 in viter468)
        {
          if (viter468.hasOwnProperty(iter469))
          {
            iter469 = viter468[iter469];
            output.writeString(iter469);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_mrna_args = function(args) {
  this.token = null;
  this.ref = null;
  this.mrna_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.mrna_id_list !== undefined) {
      this.mrna_id_list = args.mrna_id_list;
    }
  }
};
genome_annotation.thrift_service_get_cds_by_mrna_args.prototype = {};
genome_annotation.thrift_service_get_cds_by_mrna_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size470 = 0;
        var _rtmp3474;
        this.mrna_id_list = [];
        var _etype473 = 0;
        _rtmp3474 = input.readListBegin();
        _etype473 = _rtmp3474.etype;
        _size470 = _rtmp3474.size;
        for (var _i475 = 0; _i475 < _size470; ++_i475)
        {
          var elem476 = null;
          elem476 = input.readString().value;
          this.mrna_id_list.push(elem476);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_mrna_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_cds_by_mrna_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.mrna_id_list !== null && this.mrna_id_list !== undefined) {
    output.writeFieldBegin('mrna_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.mrna_id_list.length);
    for (var iter477 in this.mrna_id_list)
    {
      if (this.mrna_id_list.hasOwnProperty(iter477))
      {
        iter477 = this.mrna_id_list[iter477];
        output.writeString(iter477);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_mrna_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_cds_by_mrna_result.prototype = {};
genome_annotation.thrift_service_get_cds_by_mrna_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size478 = 0;
        var _rtmp3482;
        this.success = {};
        var _ktype479 = 0;
        var _vtype480 = 0;
        _rtmp3482 = input.readMapBegin();
        _ktype479 = _rtmp3482.ktype;
        _vtype480 = _rtmp3482.vtype;
        _size478 = _rtmp3482.size;
        for (var _i483 = 0; _i483 < _size478; ++_i483)
        {
          if (_i483 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key484 = null;
          var val485 = null;
          key484 = input.readString().value;
          val485 = input.readString().value;
          this.success[key484] = val485;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_mrna_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_cds_by_mrna_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter486 in this.success)
    {
      if (this.success.hasOwnProperty(kiter486))
      {
        var viter487 = this.success[kiter486];
        output.writeString(kiter486);
        output.writeString(viter487);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_cds_args = function(args) {
  this.token = null;
  this.ref = null;
  this.cds_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.cds_id_list !== undefined) {
      this.cds_id_list = args.cds_id_list;
    }
  }
};
genome_annotation.thrift_service_get_gene_by_cds_args.prototype = {};
genome_annotation.thrift_service_get_gene_by_cds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size488 = 0;
        var _rtmp3492;
        this.cds_id_list = [];
        var _etype491 = 0;
        _rtmp3492 = input.readListBegin();
        _etype491 = _rtmp3492.etype;
        _size488 = _rtmp3492.size;
        for (var _i493 = 0; _i493 < _size488; ++_i493)
        {
          var elem494 = null;
          elem494 = input.readString().value;
          this.cds_id_list.push(elem494);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_cds_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_gene_by_cds_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.cds_id_list !== null && this.cds_id_list !== undefined) {
    output.writeFieldBegin('cds_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.cds_id_list.length);
    for (var iter495 in this.cds_id_list)
    {
      if (this.cds_id_list.hasOwnProperty(iter495))
      {
        iter495 = this.cds_id_list[iter495];
        output.writeString(iter495);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_cds_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_gene_by_cds_result.prototype = {};
genome_annotation.thrift_service_get_gene_by_cds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size496 = 0;
        var _rtmp3500;
        this.success = {};
        var _ktype497 = 0;
        var _vtype498 = 0;
        _rtmp3500 = input.readMapBegin();
        _ktype497 = _rtmp3500.ktype;
        _vtype498 = _rtmp3500.vtype;
        _size496 = _rtmp3500.size;
        for (var _i501 = 0; _i501 < _size496; ++_i501)
        {
          if (_i501 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key502 = null;
          var val503 = null;
          key502 = input.readString().value;
          val503 = input.readString().value;
          this.success[key502] = val503;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_cds_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_gene_by_cds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter504 in this.success)
    {
      if (this.success.hasOwnProperty(kiter504))
      {
        var viter505 = this.success[kiter504];
        output.writeString(kiter504);
        output.writeString(viter505);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_mrna_args = function(args) {
  this.token = null;
  this.ref = null;
  this.mrna_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.mrna_id_list !== undefined) {
      this.mrna_id_list = args.mrna_id_list;
    }
  }
};
genome_annotation.thrift_service_get_gene_by_mrna_args.prototype = {};
genome_annotation.thrift_service_get_gene_by_mrna_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size506 = 0;
        var _rtmp3510;
        this.mrna_id_list = [];
        var _etype509 = 0;
        _rtmp3510 = input.readListBegin();
        _etype509 = _rtmp3510.etype;
        _size506 = _rtmp3510.size;
        for (var _i511 = 0; _i511 < _size506; ++_i511)
        {
          var elem512 = null;
          elem512 = input.readString().value;
          this.mrna_id_list.push(elem512);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_mrna_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_gene_by_mrna_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.mrna_id_list !== null && this.mrna_id_list !== undefined) {
    output.writeFieldBegin('mrna_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.mrna_id_list.length);
    for (var iter513 in this.mrna_id_list)
    {
      if (this.mrna_id_list.hasOwnProperty(iter513))
      {
        iter513 = this.mrna_id_list[iter513];
        output.writeString(iter513);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_mrna_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_gene_by_mrna_result.prototype = {};
genome_annotation.thrift_service_get_gene_by_mrna_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size514 = 0;
        var _rtmp3518;
        this.success = {};
        var _ktype515 = 0;
        var _vtype516 = 0;
        _rtmp3518 = input.readMapBegin();
        _ktype515 = _rtmp3518.ktype;
        _vtype516 = _rtmp3518.vtype;
        _size514 = _rtmp3518.size;
        for (var _i519 = 0; _i519 < _size514; ++_i519)
        {
          if (_i519 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key520 = null;
          var val521 = null;
          key520 = input.readString().value;
          val521 = input.readString().value;
          this.success[key520] = val521;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_mrna_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_gene_by_mrna_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter522 in this.success)
    {
      if (this.success.hasOwnProperty(kiter522))
      {
        var viter523 = this.success[kiter522];
        output.writeString(kiter522);
        output.writeString(viter523);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_cds_args = function(args) {
  this.token = null;
  this.ref = null;
  this.cds_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.cds_id_list !== undefined) {
      this.cds_id_list = args.cds_id_list;
    }
  }
};
genome_annotation.thrift_service_get_mrna_by_cds_args.prototype = {};
genome_annotation.thrift_service_get_mrna_by_cds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size524 = 0;
        var _rtmp3528;
        this.cds_id_list = [];
        var _etype527 = 0;
        _rtmp3528 = input.readListBegin();
        _etype527 = _rtmp3528.etype;
        _size524 = _rtmp3528.size;
        for (var _i529 = 0; _i529 < _size524; ++_i529)
        {
          var elem530 = null;
          elem530 = input.readString().value;
          this.cds_id_list.push(elem530);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_cds_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_mrna_by_cds_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.cds_id_list !== null && this.cds_id_list !== undefined) {
    output.writeFieldBegin('cds_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.cds_id_list.length);
    for (var iter531 in this.cds_id_list)
    {
      if (this.cds_id_list.hasOwnProperty(iter531))
      {
        iter531 = this.cds_id_list[iter531];
        output.writeString(iter531);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_cds_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_mrna_by_cds_result.prototype = {};
genome_annotation.thrift_service_get_mrna_by_cds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size532 = 0;
        var _rtmp3536;
        this.success = {};
        var _ktype533 = 0;
        var _vtype534 = 0;
        _rtmp3536 = input.readMapBegin();
        _ktype533 = _rtmp3536.ktype;
        _vtype534 = _rtmp3536.vtype;
        _size532 = _rtmp3536.size;
        for (var _i537 = 0; _i537 < _size532; ++_i537)
        {
          if (_i537 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key538 = null;
          var val539 = null;
          key538 = input.readString().value;
          val539 = input.readString().value;
          this.success[key538] = val539;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_cds_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_mrna_by_cds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter540 in this.success)
    {
      if (this.success.hasOwnProperty(kiter540))
      {
        var viter541 = this.success[kiter540];
        output.writeString(kiter540);
        output.writeString(viter541);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_gene_args = function(args) {
  this.token = null;
  this.ref = null;
  this.gene_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.gene_id_list !== undefined) {
      this.gene_id_list = args.gene_id_list;
    }
  }
};
genome_annotation.thrift_service_get_mrna_by_gene_args.prototype = {};
genome_annotation.thrift_service_get_mrna_by_gene_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size542 = 0;
        var _rtmp3546;
        this.gene_id_list = [];
        var _etype545 = 0;
        _rtmp3546 = input.readListBegin();
        _etype545 = _rtmp3546.etype;
        _size542 = _rtmp3546.size;
        for (var _i547 = 0; _i547 < _size542; ++_i547)
        {
          var elem548 = null;
          elem548 = input.readString().value;
          this.gene_id_list.push(elem548);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_gene_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_mrna_by_gene_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.gene_id_list !== null && this.gene_id_list !== undefined) {
    output.writeFieldBegin('gene_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.gene_id_list.length);
    for (var iter549 in this.gene_id_list)
    {
      if (this.gene_id_list.hasOwnProperty(iter549))
      {
        iter549 = this.gene_id_list[iter549];
        output.writeString(iter549);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_gene_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_mrna_by_gene_result.prototype = {};
genome_annotation.thrift_service_get_mrna_by_gene_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size550 = 0;
        var _rtmp3554;
        this.success = {};
        var _ktype551 = 0;
        var _vtype552 = 0;
        _rtmp3554 = input.readMapBegin();
        _ktype551 = _rtmp3554.ktype;
        _vtype552 = _rtmp3554.vtype;
        _size550 = _rtmp3554.size;
        for (var _i555 = 0; _i555 < _size550; ++_i555)
        {
          if (_i555 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key556 = null;
          var val557 = null;
          key556 = input.readString().value;
          var _size558 = 0;
          var _rtmp3562;
          val557 = [];
          var _etype561 = 0;
          _rtmp3562 = input.readListBegin();
          _etype561 = _rtmp3562.etype;
          _size558 = _rtmp3562.size;
          for (var _i563 = 0; _i563 < _size558; ++_i563)
          {
            var elem564 = null;
            elem564 = input.readString().value;
            val557.push(elem564);
          }
          input.readListEnd();
          this.success[key556] = val557;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_gene_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_mrna_by_gene_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter565 in this.success)
    {
      if (this.success.hasOwnProperty(kiter565))
      {
        var viter566 = this.success[kiter565];
        output.writeString(kiter565);
        output.writeListBegin(Thrift.Type.STRING, viter566.length);
        for (var iter567 in viter566)
        {
          if (viter566.hasOwnProperty(iter567))
          {
            iter567 = viter566[iter567];
            output.writeString(iter567);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_exons_args = function(args) {
  this.token = null;
  this.ref = null;
  this.mrna_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.mrna_id_list !== undefined) {
      this.mrna_id_list = args.mrna_id_list;
    }
  }
};
genome_annotation.thrift_service_get_mrna_exons_args.prototype = {};
genome_annotation.thrift_service_get_mrna_exons_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size568 = 0;
        var _rtmp3572;
        this.mrna_id_list = [];
        var _etype571 = 0;
        _rtmp3572 = input.readListBegin();
        _etype571 = _rtmp3572.etype;
        _size568 = _rtmp3572.size;
        for (var _i573 = 0; _i573 < _size568; ++_i573)
        {
          var elem574 = null;
          elem574 = input.readString().value;
          this.mrna_id_list.push(elem574);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_exons_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_mrna_exons_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.mrna_id_list !== null && this.mrna_id_list !== undefined) {
    output.writeFieldBegin('mrna_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.mrna_id_list.length);
    for (var iter575 in this.mrna_id_list)
    {
      if (this.mrna_id_list.hasOwnProperty(iter575))
      {
        iter575 = this.mrna_id_list[iter575];
        output.writeString(iter575);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_exons_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_mrna_exons_result.prototype = {};
genome_annotation.thrift_service_get_mrna_exons_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size576 = 0;
        var _rtmp3580;
        this.success = {};
        var _ktype577 = 0;
        var _vtype578 = 0;
        _rtmp3580 = input.readMapBegin();
        _ktype577 = _rtmp3580.ktype;
        _vtype578 = _rtmp3580.vtype;
        _size576 = _rtmp3580.size;
        for (var _i581 = 0; _i581 < _size576; ++_i581)
        {
          if (_i581 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key582 = null;
          var val583 = null;
          key582 = input.readString().value;
          var _size584 = 0;
          var _rtmp3588;
          val583 = [];
          var _etype587 = 0;
          _rtmp3588 = input.readListBegin();
          _etype587 = _rtmp3588.etype;
          _size584 = _rtmp3588.size;
          for (var _i589 = 0; _i589 < _size584; ++_i589)
          {
            var elem590 = null;
            elem590 = new genome_annotation.Exon_data();
            elem590.read(input);
            val583.push(elem590);
          }
          input.readListEnd();
          this.success[key582] = val583;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_exons_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_mrna_exons_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter591 in this.success)
    {
      if (this.success.hasOwnProperty(kiter591))
      {
        var viter592 = this.success[kiter591];
        output.writeString(kiter591);
        output.writeListBegin(Thrift.Type.STRUCT, viter592.length);
        for (var iter593 in viter592)
        {
          if (viter592.hasOwnProperty(iter593))
          {
            iter593 = viter592[iter593];
            iter593.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_utrs_args = function(args) {
  this.token = null;
  this.ref = null;
  this.mrna_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.mrna_id_list !== undefined) {
      this.mrna_id_list = args.mrna_id_list;
    }
  }
};
genome_annotation.thrift_service_get_mrna_utrs_args.prototype = {};
genome_annotation.thrift_service_get_mrna_utrs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size594 = 0;
        var _rtmp3598;
        this.mrna_id_list = [];
        var _etype597 = 0;
        _rtmp3598 = input.readListBegin();
        _etype597 = _rtmp3598.etype;
        _size594 = _rtmp3598.size;
        for (var _i599 = 0; _i599 < _size594; ++_i599)
        {
          var elem600 = null;
          elem600 = input.readString().value;
          this.mrna_id_list.push(elem600);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_utrs_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_mrna_utrs_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.mrna_id_list !== null && this.mrna_id_list !== undefined) {
    output.writeFieldBegin('mrna_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.mrna_id_list.length);
    for (var iter601 in this.mrna_id_list)
    {
      if (this.mrna_id_list.hasOwnProperty(iter601))
      {
        iter601 = this.mrna_id_list[iter601];
        output.writeString(iter601);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_utrs_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_mrna_utrs_result.prototype = {};
genome_annotation.thrift_service_get_mrna_utrs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size602 = 0;
        var _rtmp3606;
        this.success = {};
        var _ktype603 = 0;
        var _vtype604 = 0;
        _rtmp3606 = input.readMapBegin();
        _ktype603 = _rtmp3606.ktype;
        _vtype604 = _rtmp3606.vtype;
        _size602 = _rtmp3606.size;
        for (var _i607 = 0; _i607 < _size602; ++_i607)
        {
          if (_i607 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key608 = null;
          var val609 = null;
          key608 = input.readString().value;
          var _size610 = 0;
          var _rtmp3614;
          val609 = {};
          var _ktype611 = 0;
          var _vtype612 = 0;
          _rtmp3614 = input.readMapBegin();
          _ktype611 = _rtmp3614.ktype;
          _vtype612 = _rtmp3614.vtype;
          _size610 = _rtmp3614.size;
          for (var _i615 = 0; _i615 < _size610; ++_i615)
          {
            if (_i615 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            var key616 = null;
            var val617 = null;
            key616 = input.readString().value;
            val617 = new genome_annotation.UTR_data();
            val617.read(input);
            val609[key616] = val617;
          }
          input.readMapEnd();
          this.success[key608] = val609;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_utrs_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_mrna_utrs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.success));
    for (var kiter618 in this.success)
    {
      if (this.success.hasOwnProperty(kiter618))
      {
        var viter619 = this.success[kiter618];
        output.writeString(kiter618);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter619));
        for (var kiter620 in viter619)
        {
          if (viter619.hasOwnProperty(kiter620))
          {
            var viter621 = viter619[kiter620];
            output.writeString(kiter620);
            viter621.write(output);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_summary_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
  }
};
genome_annotation.thrift_service_get_summary_args.prototype = {};
genome_annotation.thrift_service_get_summary_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_summary_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_summary_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_summary_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_summary_result.prototype = {};
genome_annotation.thrift_service_get_summary_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new genome_annotation.Summary_data();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_summary_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_summary_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_save_summary_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
  }
};
genome_annotation.thrift_service_save_summary_args.prototype = {};
genome_annotation.thrift_service_save_summary_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_save_summary_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_save_summary_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_save_summary_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_save_summary_result.prototype = {};
genome_annotation.thrift_service_save_summary_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_save_summary_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_save_summary_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_serviceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
genome_annotation.thrift_serviceClient.prototype = {};
genome_annotation.thrift_serviceClient.prototype.get_taxon = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_taxon(token, ref);
    return this.recv_get_taxon();
  } else {
    var postData = this.send_get_taxon(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_taxon);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_taxon = function(token, ref, callback) {
  this.output.writeMessageBegin('get_taxon', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_taxon_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_taxon = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_taxon_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_taxon failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_assembly = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_assembly(token, ref);
    return this.recv_get_assembly();
  } else {
    var postData = this.send_get_assembly(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_assembly);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_assembly = function(token, ref, callback) {
  this.output.writeMessageBegin('get_assembly', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_assembly_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_assembly = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_assembly_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_assembly failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_types = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_feature_types(token, ref);
    return this.recv_get_feature_types();
  } else {
    var postData = this.send_get_feature_types(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_types);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_types = function(token, ref, callback) {
  this.output.writeMessageBegin('get_feature_types', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_types_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_types = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_types_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_types failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_type_descriptions = function(token, ref, feature_type_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_type_descriptions(token, ref, feature_type_list);
    return this.recv_get_feature_type_descriptions();
  } else {
    var postData = this.send_get_feature_type_descriptions(token, ref, feature_type_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_type_descriptions);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_type_descriptions = function(token, ref, feature_type_list, callback) {
  this.output.writeMessageBegin('get_feature_type_descriptions', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_type_descriptions_args();
  args.token = token;
  args.ref = ref;
  args.feature_type_list = feature_type_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_type_descriptions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_type_descriptions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_type_descriptions failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_type_counts = function(token, ref, feature_type_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_type_counts(token, ref, feature_type_list);
    return this.recv_get_feature_type_counts();
  } else {
    var postData = this.send_get_feature_type_counts(token, ref, feature_type_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_type_counts);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_type_counts = function(token, ref, feature_type_list, callback) {
  this.output.writeMessageBegin('get_feature_type_counts', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_type_counts_args();
  args.token = token;
  args.ref = ref;
  args.feature_type_list = feature_type_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_type_counts = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_type_counts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_type_counts failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_ids = function(token, ref, filters, group_type, callback) {
  if (callback === undefined) {
    this.send_get_feature_ids(token, ref, filters, group_type);
    return this.recv_get_feature_ids();
  } else {
    var postData = this.send_get_feature_ids(token, ref, filters, group_type, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_ids);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_ids = function(token, ref, filters, group_type, callback) {
  this.output.writeMessageBegin('get_feature_ids', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_ids_args();
  args.token = token;
  args.ref = ref;
  args.filters = filters;
  args.group_type = group_type;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_ids = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_ids_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_ids failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_features = function(token, ref, feature_id_list, callback) {
  if (callback === undefined) {
    this.send_get_features(token, ref, feature_id_list);
    return this.recv_get_features();
  } else {
    var postData = this.send_get_features(token, ref, feature_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_features);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_features = function(token, ref, feature_id_list, callback) {
  this.output.writeMessageBegin('get_features', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_features_args();
  args.token = token;
  args.ref = ref;
  args.feature_id_list = feature_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_features = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_features_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_features failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_proteins = function(token, ref, cds_id_list, callback) {
  if (callback === undefined) {
    this.send_get_proteins(token, ref, cds_id_list);
    return this.recv_get_proteins();
  } else {
    var postData = this.send_get_proteins(token, ref, cds_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_proteins);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_proteins = function(token, ref, cds_id_list, callback) {
  this.output.writeMessageBegin('get_proteins', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_proteins_args();
  args.token = token;
  args.ref = ref;
  args.cds_id_list = cds_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_proteins = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_proteins_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_proteins failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_locations = function(token, ref, feature_id_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_locations(token, ref, feature_id_list);
    return this.recv_get_feature_locations();
  } else {
    var postData = this.send_get_feature_locations(token, ref, feature_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_locations);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_locations = function(token, ref, feature_id_list, callback) {
  this.output.writeMessageBegin('get_feature_locations', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_locations_args();
  args.token = token;
  args.ref = ref;
  args.feature_id_list = feature_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_locations = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_locations_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_locations failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_publications = function(token, ref, feature_id_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_publications(token, ref, feature_id_list);
    return this.recv_get_feature_publications();
  } else {
    var postData = this.send_get_feature_publications(token, ref, feature_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_publications);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_publications = function(token, ref, feature_id_list, callback) {
  this.output.writeMessageBegin('get_feature_publications', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_publications_args();
  args.token = token;
  args.ref = ref;
  args.feature_id_list = feature_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_publications = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_publications_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_publications failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_dna = function(token, ref, feature_id_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_dna(token, ref, feature_id_list);
    return this.recv_get_feature_dna();
  } else {
    var postData = this.send_get_feature_dna(token, ref, feature_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_dna);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_dna = function(token, ref, feature_id_list, callback) {
  this.output.writeMessageBegin('get_feature_dna', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_dna_args();
  args.token = token;
  args.ref = ref;
  args.feature_id_list = feature_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_dna = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_dna_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_dna failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_functions = function(token, ref, feature_id_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_functions(token, ref, feature_id_list);
    return this.recv_get_feature_functions();
  } else {
    var postData = this.send_get_feature_functions(token, ref, feature_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_functions);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_functions = function(token, ref, feature_id_list, callback) {
  this.output.writeMessageBegin('get_feature_functions', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_functions_args();
  args.token = token;
  args.ref = ref;
  args.feature_id_list = feature_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_functions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_functions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_functions failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_aliases = function(token, ref, feature_id_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_aliases(token, ref, feature_id_list);
    return this.recv_get_feature_aliases();
  } else {
    var postData = this.send_get_feature_aliases(token, ref, feature_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_aliases);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_aliases = function(token, ref, feature_id_list, callback) {
  this.output.writeMessageBegin('get_feature_aliases', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_aliases_args();
  args.token = token;
  args.ref = ref;
  args.feature_id_list = feature_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_aliases = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_aliases_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_aliases failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_cds_by_gene = function(token, ref, gene_id_list, callback) {
  if (callback === undefined) {
    this.send_get_cds_by_gene(token, ref, gene_id_list);
    return this.recv_get_cds_by_gene();
  } else {
    var postData = this.send_get_cds_by_gene(token, ref, gene_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_cds_by_gene);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_cds_by_gene = function(token, ref, gene_id_list, callback) {
  this.output.writeMessageBegin('get_cds_by_gene', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_cds_by_gene_args();
  args.token = token;
  args.ref = ref;
  args.gene_id_list = gene_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_cds_by_gene = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_cds_by_gene_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_cds_by_gene failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_cds_by_mrna = function(token, ref, mrna_id_list, callback) {
  if (callback === undefined) {
    this.send_get_cds_by_mrna(token, ref, mrna_id_list);
    return this.recv_get_cds_by_mrna();
  } else {
    var postData = this.send_get_cds_by_mrna(token, ref, mrna_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_cds_by_mrna);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_cds_by_mrna = function(token, ref, mrna_id_list, callback) {
  this.output.writeMessageBegin('get_cds_by_mrna', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_cds_by_mrna_args();
  args.token = token;
  args.ref = ref;
  args.mrna_id_list = mrna_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_cds_by_mrna = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_cds_by_mrna_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_cds_by_mrna failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_gene_by_cds = function(token, ref, cds_id_list, callback) {
  if (callback === undefined) {
    this.send_get_gene_by_cds(token, ref, cds_id_list);
    return this.recv_get_gene_by_cds();
  } else {
    var postData = this.send_get_gene_by_cds(token, ref, cds_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_gene_by_cds);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_gene_by_cds = function(token, ref, cds_id_list, callback) {
  this.output.writeMessageBegin('get_gene_by_cds', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_gene_by_cds_args();
  args.token = token;
  args.ref = ref;
  args.cds_id_list = cds_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_gene_by_cds = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_gene_by_cds_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_gene_by_cds failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_gene_by_mrna = function(token, ref, mrna_id_list, callback) {
  if (callback === undefined) {
    this.send_get_gene_by_mrna(token, ref, mrna_id_list);
    return this.recv_get_gene_by_mrna();
  } else {
    var postData = this.send_get_gene_by_mrna(token, ref, mrna_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_gene_by_mrna);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_gene_by_mrna = function(token, ref, mrna_id_list, callback) {
  this.output.writeMessageBegin('get_gene_by_mrna', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_gene_by_mrna_args();
  args.token = token;
  args.ref = ref;
  args.mrna_id_list = mrna_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_gene_by_mrna = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_gene_by_mrna_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_gene_by_mrna failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_mrna_by_cds = function(token, ref, cds_id_list, callback) {
  if (callback === undefined) {
    this.send_get_mrna_by_cds(token, ref, cds_id_list);
    return this.recv_get_mrna_by_cds();
  } else {
    var postData = this.send_get_mrna_by_cds(token, ref, cds_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_mrna_by_cds);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_mrna_by_cds = function(token, ref, cds_id_list, callback) {
  this.output.writeMessageBegin('get_mrna_by_cds', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_mrna_by_cds_args();
  args.token = token;
  args.ref = ref;
  args.cds_id_list = cds_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_mrna_by_cds = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_mrna_by_cds_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_mrna_by_cds failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_mrna_by_gene = function(token, ref, gene_id_list, callback) {
  if (callback === undefined) {
    this.send_get_mrna_by_gene(token, ref, gene_id_list);
    return this.recv_get_mrna_by_gene();
  } else {
    var postData = this.send_get_mrna_by_gene(token, ref, gene_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_mrna_by_gene);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_mrna_by_gene = function(token, ref, gene_id_list, callback) {
  this.output.writeMessageBegin('get_mrna_by_gene', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_mrna_by_gene_args();
  args.token = token;
  args.ref = ref;
  args.gene_id_list = gene_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_mrna_by_gene = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_mrna_by_gene_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_mrna_by_gene failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_mrna_exons = function(token, ref, mrna_id_list, callback) {
  if (callback === undefined) {
    this.send_get_mrna_exons(token, ref, mrna_id_list);
    return this.recv_get_mrna_exons();
  } else {
    var postData = this.send_get_mrna_exons(token, ref, mrna_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_mrna_exons);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_mrna_exons = function(token, ref, mrna_id_list, callback) {
  this.output.writeMessageBegin('get_mrna_exons', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_mrna_exons_args();
  args.token = token;
  args.ref = ref;
  args.mrna_id_list = mrna_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_mrna_exons = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_mrna_exons_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_mrna_exons failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_mrna_utrs = function(token, ref, mrna_id_list, callback) {
  if (callback === undefined) {
    this.send_get_mrna_utrs(token, ref, mrna_id_list);
    return this.recv_get_mrna_utrs();
  } else {
    var postData = this.send_get_mrna_utrs(token, ref, mrna_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_mrna_utrs);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_mrna_utrs = function(token, ref, mrna_id_list, callback) {
  this.output.writeMessageBegin('get_mrna_utrs', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_mrna_utrs_args();
  args.token = token;
  args.ref = ref;
  args.mrna_id_list = mrna_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_mrna_utrs = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_mrna_utrs_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_mrna_utrs failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_summary = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_summary(token, ref);
    return this.recv_get_summary();
  } else {
    var postData = this.send_get_summary(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_summary);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_summary = function(token, ref, callback) {
  this.output.writeMessageBegin('get_summary', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_summary_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_summary = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_summary_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_summary failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.save_summary = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_save_summary(token, ref);
    return this.recv_save_summary();
  } else {
    var postData = this.send_save_summary(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_save_summary);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_save_summary = function(token, ref, callback) {
  this.output.writeMessageBegin('save_summary', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_save_summary_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_save_summary = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_save_summary_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'save_summary failed: unknown result';
};
